      // init vertex array class
        VertexArray va; 
        // init vertex buffer
        VertexBuffer vb(positions, 4 * 4 * sizeof(float));
        // init vertex buffer layout
        VertexBufferLayout layout;
        layout.Push<float>(2);
        layout.Push<float>(2);
        // add layout to vertex array object
        va.AddBuffer(vb, layout);

        IndexBuffer ib(indices, 6);
        
        // sets aspect ratio in orthographic matrix
        glm::mat4 proj = glm::ortho(0.0f, 960.0f, 0.0f, 540.0f, -100.0f, 100.0f);

        // camera matrix -- i.e. translates camera to the right by moving objects to the right (simulated movement)
        glm::mat4 view = glm::translate(glm::mat4(1.0f), glm::vec3(0, 0, 0));

        // DEBUG MODE: prints source code of shaders
        /*std::cout << "VERTEX" << std::endl;
        std::cout << source.VertexSource << std::endl;
        std::cout << "FRAGMENT" << std::endl;
        std::cout << source.FragmentSource << std::endl;*/

        Shader shader("res/shaders/Basic.shader");
        shader.Bind();
        shader.SetUniform4f("u_Color", 0.8f, 0.3f, 0.8f, 1.0f);

        Texture texture("res/textures/cancel_blank_back.png");
        texture.Bind();
        // bind texture to slot 0
        shader.SetUniform1i("u_Texture", 0);

        // unbind everything
        va.Unbind();
        vb.Unbind();
        ib.Unbind();
        shader.Unbind(); 

{
                glm::mat4 model = glm::translate(glm::mat4(1.0f), translationA);
                glm::mat4 mvp = proj * view * model;

                shader.Bind();
                shader.SetUniform1i("u_Texture", 0);
                shader.SetUniformMat4f("u_MVP", mvp);
            }

            renderer.Draw(va, ib, shader);

            
            {
                glm::mat4 model = glm::translate(glm::mat4(1.0f), translationB);
                glm::mat4 mvp = proj * view * model;
                
                shader.Bind();
                shader.SetUniform1i("u_Texture", 0);
                shader.SetUniformMat4f("u_MVP", mvp);
            }

            renderer.Draw(va, ib, shader);

            // uniform modulation for color shift
            if (r > 1.0f)
                increment = -0.05f;
            else if (r < 0.05f)
                increment = 0.05f;

            r += increment;
            {
                // 3 componenent slider to modify x axis translation value 
                ImGui::SliderFloat3("Translation A", &translationA.x, 0.0f, 960.0f);
                ImGui::SliderFloat3("Translation B", &translationB.x, 0.0f, 960.0f);
                ImGui::Text("Application average %.3f ms/frame (%.1f FPS)", 1000.0f / ImGui::GetIO().Framerate, ImGui::GetIO().Framerate);
            }